import threading  # Module pour la gestion des threads (ex√©cution parall√®le)
import time       # Module pour les d√©lais (pause/sommeil)
import random     # Module pour faire des choix al√©atoires (chambres, dur√©e, etc.)

# Cr√©ation d'un verrou pour prot√©ger l'acc√®s aux ressources partag√©es
lock = threading.Lock()

# Condition de synchronisation bas√©e sur ce verrou, elle permet √† un thread d'attendre jusqu'√† ce qu'une autre action le r√©veille
condition = threading.Condition(lock)

# Dictionnaire repr√©sentant les chambres (chambre_num√©ro : True si disponible, False si occup√©e)
chambres = {i: True for i in range(101, 106)}  # 5 chambres : 101 √† 105

# Dictionnaire des r√©servations en cours : (client_id : num√©ro de chambre r√©serv√©e)
reservations = {}

# Fonction pour afficher l'√©tat de toutes les chambres (occup√©e ou disponible)
def afficher_etat():
    print("\n√âtat des chambres :")
    for chambre, dispo in chambres.items():
        statut = "Disponible" if dispo else "Occup√©e"
        print(f"  Chambre {chambre} : {statut}")
    print("-" * 40)

# Fonction ex√©cut√©e par chaque thread client, elle tente de r√©server une chambre al√©atoire, attend si elle est occup√©e, puis recommence plus tard
def reserver_chambre(client_id):
    while True:  # Boucle infinie pour permettre √† un client de r√©server plusieurs fois
        # Le client choisit une chambre au hasard
        chambre_choisie = random.choice(list(chambres.keys()))

        # Synchronisation pour v√©rifier ou r√©server la chambre de mani√®re s√ªre
        with condition:
            # Si la chambre est occup√©e, le client attend qu'elle se lib√®re
            while not chambres[chambre_choisie]:
                print(f"[‚è≥] Client {client_id} attend que la chambre {chambre_choisie} se lib√®re...")
                condition.wait()  # Le thread s'endort jusqu'√† √™tre r√©veill√©

            # ‚úÖ Si la chambre est libre, le client la r√©serve
            chambres[chambre_choisie] = False
            reservations[client_id] = chambre_choisie
            print(f"[‚úÖ] Client {client_id} a r√©serv√© la chambre {chambre_choisie}.")
            afficher_etat()

            # Planification du d√©part du client (il partira apr√®s un d√©lai al√©atoire)
            sejour = random.randint(5, 10)  # Dur√©e du s√©jour entre 5 et 10 secondes
            threading.Thread(target=depart_client, args=(client_id, sejour)).start()

        # Le client attend un moment (entre 10 et 20 secondes) avant de tenter une nouvelle r√©servation
        time.sleep(random.randint(10, 20))

# Fonction appel√©e automatiquement quand un client quitte sa chambre
def depart_client(client_id, delay):
    time.sleep(delay)  # Attendre la dur√©e du s√©jour avant le d√©part
    with condition:  # Synchronisation pour lib√©rer la chambre en toute s√©curit√©
        if client_id in reservations:
            chambre = reservations[client_id]  # Obtenir la chambre occup√©e
            chambres[chambre] = True           # Lib√©rer la chambre
            del reservations[client_id]        # Supprimer la r√©servation du client
            print(f"[üîÑ] Client {client_id} quitte la chambre {chambre} apr√®s {delay}s.")
            afficher_etat()
            condition.notify_all()  # R√©veiller tous les clients qui attendent une chambre

# Cr√©ation d'une liste de clients (identifiants de 1 √† 9)
clients = [{"id": i} for i in range(1, 10)]

# Lancement d'un thread pour chaque client
for client in clients:
    t = threading.Thread(target=reserver_chambre, args=(client["id"],))
    t.daemon = True  # Thread "daemon" : il s'arr√™te automatiquement si le programme principal se termine
    t.start()

# Boucle infinie pour que le programme principal reste actif (sinon tous les threads s‚Äôarr√™tent imm√©diatement)
while True:
    time.sleep(1)  # Pause pour ne pas saturer le processeur
